// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

model User {
  id        String        @id @default(uuid())
  yandexId  String        @unique
  email     String?
  name      String?
  createdAt DateTime      @default(now())
  cart      Cart?
  orders    Order[]
  sessions  AuthSession[]
}

model AuthSession {
  id           String   @id @default(uuid())
  refreshToken String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Restaurant {
  id     String      @id @default(uuid())
  name   String      @unique
  path   String      @unique
  groups FoodGroup[]
}

model FoodGroup {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  foods        Food[]
}

model Food {
  id          String      @id @default(uuid())
  name        String
  quantity    Int
  unit        String
  price       Decimal
  description String?
  photoUrl    String?
  group       FoodGroup   @relation(fields: [groupId], references: [id])
  groupId     String
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  food      Food    @relation(fields: [foodId], references: [id])
  foodId    String
  isDeleted Boolean @default(false)
}

model PaymentType {
  id     String  @id @default(uuid())
  code   String  @unique
  title  String
  orders Order[]
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId String
  tableNumber   Int
  totalAmount   Decimal
  paid          Boolean     @default(false)
  createdAt     DateTime    @default(now())
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  food      Food    @relation(fields: [foodId], references: [id])
  foodId    String
  quantity  Int
  unitPrice Decimal
}
